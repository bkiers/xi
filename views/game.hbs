<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Xi - Game {{game.id}}</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
  <style>
    body {
      padding: 10px;
    }
    #board-wrapper {
      width: 450px;
    }
    table {
      border-collapse: collapse;
      border-spacing: 0;
    }
    td, tr, img  {
      padding: 0;
      margin: 0;
      border: none;
    }
    #controls {
      padding-bottom: 5px;
    }
    code {
      font-size: xxx-large;
    }
    .right {
      float: right;
    }
    .piece {
      position: absolute;
      margin-top: -45px;
      margin-left: 5px;
      height: 40px;
      width: 40px;
    }
    .highlight {
      position: absolute;
      height: 50px;
      width: 50px;
      display: none;
    }
    .square {
      height: 50px;
      width: 50px;
      display: block;
    }
    .time-left-label {
      margin-right: 25px;
      margin-top: 4px;
    }
  </style>
  <script>
    let firstClick = null;
    let secondClick = null;
    let movedImgPiece = null;

    let isTurnPlayer = {{game.isTurnPlayer}};
    let ownColor = '{{game.ownColor}}';
    {{#game.lastMove}}
    let highlighted = [
      [{{this.from.rowIndex}}, {{this.from.columnIndex}}],
      [{{this.to.rowIndex}}, {{this.to.columnIndex}}]
    ];
    {{/game.lastMove}}
    {{^game.lastMove}}
    let highlighted = [];
    {{/game.lastMove}}

    function highlightSquares(highlight) {
      if (highlighted.length === 0) {
        return;
      }

      for (let s of highlighted) {
        let square = document.getElementById(`highlight_${s[0]}_${s[1]}`);
        square.style.display = highlight ? 'block' : 'none';
      }
    }

    function toggleHighlighted(newHighlighted) {
      highlightSquares(false);
      highlighted = newHighlighted;
      highlightSquares(true);
    }

    function confirmDraw() {
      fetch(`/games/{{game.id}}/draw/propose`, {
        method: 'POST',
        credentials: 'same-origin',
        body: JSON.stringify({})
      }).then(response => response.json())
        .then(data => {
          if (data.error) {
            displayMessage(data.error, 'danger');
          } else {
            displayMessage('Proposal sent', 'primary');
          }
        });
    }

    function confirmForfeit() {
      fetch(`/games/{{game.id}}/forfeit`, {
        method: 'POST',
        credentials: 'same-origin',
        body: JSON.stringify({})
      }).then(response => response.json())
        .then(data => {
          if (data.error) {
            displayMessage(data.error, 'danger');
          } else {
            window.location.replace('/games/{{game.id}}');
          }
        });
    }

    function confirmMove() {
      if (!firstClick || !secondClick) {
        return;
      }

      fetch(`/games/{{game.id}}/move/${firstClick[0]}/${firstClick[1]}/${secondClick[0]}/${secondClick[1]}/${confirm}`, {
        method: 'POST',
        credentials: 'same-origin',
        body: JSON.stringify({})
      }).then(response => response.json())
        .then(data => {
          if (data.error) {
            document.getElementById('move-button').disabled = true;

            displayMessage(data.error, 'danger');

            let tdFrom = document.getElementById(`${firstClick[0]}_${firstClick[1]}`);
            let tdTo = document.getElementById(`${secondClick[0]}_${secondClick[1]}`);

            tdTo.removeChild(movedImgPiece);
            tdFrom.appendChild(movedImgPiece);

            movedImgPiece = null;
            firstClick = null;
            secondClick = null;
            toggleHighlighted([]);
          } else {
            window.location.replace('/games/{{game.id}}');
          }
        });
    }

    function clickSquare(square) {
      document.getElementById('error').innerText = '';

      if (!isTurnPlayer) {
        return;
      }

      let occupiedBy = square.dataset.occupiedBy;
      let clickedSquare = [square.dataset.rowIndex, square.dataset.columnIndex];

      if (firstClick === null) {
        if (occupiedBy === ownColor) {
          firstClick = clickedSquare;
          toggleHighlighted([firstClick]);
        }
      } else if (firstClick[0] === clickedSquare[0] && firstClick[1] === clickedSquare[1]) {
        firstClick = null;
        toggleHighlighted([]);
      } else if (secondClick !== null && secondClick[0] === clickedSquare[0] && secondClick[1] === clickedSquare[1]) {
        let tdFrom = document.getElementById(`${firstClick[0]}_${firstClick[1]}`);
        let tdTo = document.getElementById(`${secondClick[0]}_${secondClick[1]}`);

        tdTo.removeChild(movedImgPiece);
        tdFrom.appendChild(movedImgPiece);

        movedImgPiece = null;
        firstClick = null;
        secondClick = null;
        toggleHighlighted([]);

        document.getElementById('move-button').disabled = true;
      } else {
        secondClick = clickedSquare;
        toggleHighlighted([firstClick, secondClick]);

        let tdFrom = document.getElementById(`${firstClick[0]}_${firstClick[1]}`);
        let tdTo = document.getElementById(`${secondClick[0]}_${secondClick[1]}`);
        movedImgPiece = tdFrom.getElementsByClassName("piece")[0];

        tdFrom.removeChild(movedImgPiece);
        tdTo.appendChild(movedImgPiece);

        document.getElementById('move-button').disabled = false;
      }
    }

    function displayMessage(message, type) {
      let errorDiv = document.getElementById('error');
      let alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.setAttribute('role', 'alert');
      let errorSpan = document.createElement('span');
      errorSpan.innerText = message;
      let closeButton = document.createElement('button');
      closeButton.setAttribute('type', 'button');
      closeButton.setAttribute('data-dismiss', 'alert');
      closeButton.setAttribute('aria-label', 'alert');
      closeButton.className = 'close';
      let closeSpan = document.createElement('span');
      closeSpan.setAttribute('aria-hidden', 'true');
      closeSpan.innerHTML = '&times;';
      closeButton.appendChild(closeSpan);
      alertDiv.appendChild(errorSpan);
      alertDiv.appendChild(closeButton);
      errorDiv.appendChild(alertDiv);
    }

    function humanReadable(seconds) {
      let d = Math.floor(seconds / 86400);
      let h = Math.floor((seconds % 86400) / 3600);
      let m = Math.floor(((seconds % 86400) % 3600) / 60);
      let s = Math.round(seconds % 60);

      let result = '';

      if (d > 0) {
        result = `${d} day${d > 1 ? 's' : ''} `;
      }

      result += h > 0 ? h < 10 ? `0${h}:` : `${h}:` : '00:';
      result += m > 0 ? m < 10 ? `0${m}:` : `${m}:` : '00:';
      result += s > 0 ? s < 10 ? `0${s}` : `${s}` : '00';

      return result;
    }

    if (!{{game.gameOver}} && {{game.accepted}}) {
      let clockRunsOutAtSeconds = {{game.clockRunsOutAtSeconds}};
      window.setInterval(function() {
        let secondsToGo = clockRunsOutAtSeconds - Math.round(new Date().getTime() / 1000);
        let elTimeLeft = document.getElementsByClassName('time-left-label')[0];
        elTimeLeft.innerHTML = humanReadable(secondsToGo);
      }, 1000);
    }
  </script>
</head>
<body onload="highlightSquares(true)">
  <div id="board-wrapper">
    <h3 class="text-monospace">
      {{#if game.reversed}}
        {{game.redPlayer.name}}
        {{#if game.turnRed}}
          <small class="text-muted text-monospace time-left-label right"></small>
        {{/if}}
      {{else}}
        {{game.blackPlayer.name}}
        {{#if game.turnBlack}}
          <small class="text-muted text-monospace time-left-label right"></small>
        {{/if}}
      {{/if}}
    </h3>
    {{#if game.accepted}}
      <table>
        {{#each game.currentState}}
          <tr>
            {{#each this}}
              <td
                id="{{this.rowIndex}}_{{this.columnIndex}}"
                onclick="clickSquare(this)"
                data-row-index="{{this.rowIndex}}"
                data-column-index="{{this.columnIndex}}"
                data-occupied-by="{{this.occupiedBy}}"
              >
                <img id="highlight_{{this.rowIndex}}_{{this.columnIndex}}" src="/images/pieces/highlight.svg" class="highlight"/>
                <img src="/images/board/{{this.tileName}}" class="square"/>
                {{#if this.piece}}
                  <img src="/images/pieces/{{this.piece.pieceName}}" class="piece"/>
                {{/if}}
              </td>
            {{/each}}
          </tr>
        {{/each}}
      </table>
    {{else}}
      This game has not yet been accepted by {{game.invitedPlayer.name}}
    {{/if}}
    <h3 class="text-monospace">
      {{#if game.reversed}}
        {{game.blackPlayer.name}}
        {{#if game.turnBlack}}
          <small class="text-muted text-monospace time-left-label right"></small>
        {{/if}}
      {{else}}
        {{game.redPlayer.name}}
        {{#if game.turnRed}}
          <small class="text-muted text-monospace time-left-label right"></small>
        {{/if}}
      {{/if}}
    </h3>
    <p>
      {{#if game.gameOver}}
        {{#game.winnerPlayer}}
          {{name}} won the game
        {{/game.winnerPlayer}}
        {{^game.winnerPlayer}}
          This game was a draw
        {{/game.winnerPlayer}}
      {{/if}}
    </p>

    {{#unless game.gameOver}}
      {{#if game.turnPlayerIsCheck}}
        <p>It's check!</p>
      {{/if}}
    {{/unless}}

    <div id="controls">
      <span class="dropdown">
        <button id="move-button" disabled class="btn btn-primary dropdown-toggle btn-sm" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          move
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item" onclick="confirmMove()" href="#">confirm</a>
        </div>
      </span>
      <span class="dropdown">
        <button class="btn btn-warning dropdown-toggle btn-sm" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          draw
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item" onclick="confirmDraw()" href="#">confirm</a>
        </div>
      </span>
      <span class="dropdown">
        <button class="btn btn-danger dropdown-toggle btn-sm" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          forfeit
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item" onclick="confirmForfeit()" href="#">confirm</a>
        </div>
      </span>
    </div>

    <div id="error"></div>
  </div>
</body>
</html>
